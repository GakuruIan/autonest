// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  super_admin
  admin
  user
  manager
}

enum CarBrand {
  toyota
  mazda
  nissan
  honda
}

enum CarCategory {
  sedan
  suv
  hatchback
  luxury
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  clerkId   String   @unique
  username  String?  @unique
  avatar    String
  role      Role     @default(user)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  car       Car[]    @relation("UserCars")
  cart      Cart?
}

model Car {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  brand       CarBrand
  model       String
  category    CarCategory
  year        String
  price       Int
  thumbnailId String      @unique @db.ObjectId
  thumbnail   Image?      @relation("CarThumbnail", fields: [thumbnailId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  specifications Specifications
  photos         Image[]        @relation("CarPhotos")
  description    String
  features       String[]
  in_stock       Boolean
  rating         Float
  ownerId        String         @db.ObjectId
  owner          User           @relation("UserCars", fields: [ownerId], references: [id])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  cartItem       CartItem[]
}

model Image {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  url          String
  fileId       String
  carThumbnail Car?     @relation("CarThumbnail")
  carPhotosId  String?  @db.ObjectId
  carPhotos    Car?     @relation("CarPhotos", fields: [carPhotosId], references: [id])
  createdAt    DateTime @default(now())
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  item      CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId   String  @db.ObjectId
  cart     Cart    @relation(fields: [cartId], references: [id])
  carId    String  @db.ObjectId
  car      Car     @relation(fields: [carId], references: [id])
  quantity Int     @default(1)
  sold     Boolean @default(false)

  @@unique([cartId, carId])
}

type Specifications {
  engine           String
  transmission     String
  fuel_type        String
  mileage          String
  seating_capacity Int
}
